

# This file was *autogenerated* from the file a.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_16 = Integer(16); _sage_const_1 = Integer(1); _sage_const_80 = Integer(80); _sage_const_0 = Integer(0); _sage_const_128 = Integer(128); _sage_const_50 = Integer(50)
import random
# DHの素数
p = next_prime(_sage_const_2 **_sage_const_16 )

# pのbit数
n = ceil(log(p, _sage_const_2 ))

# MSBの漏洩してほしいbit数
k = ceil(sqrt(n)) + ceil(log(n, _sage_const_2 ))

# 行列の必要な次元数
d = _sage_const_2  * ceil(sqrt(n))

# MSB_k(alpha*t_i) == a_i
# alpha*t_i mod p - a_i < p/2^k

def generate_msb(k, x):
    mask = random.randrange(_sage_const_1 ,_sage_const_2 **k)
    return x ^ mask

def babai_cvp(basis, target_vector):
    gso, _ = basis.gram_schmidt()
    w = vector(QQ, target_vector)
    size = len(basis.rows())
    res = vector(QQ, size)
    for i in reversed(range(size)):
        l = QQ(w * gso[i]) / QQ(gso[i] * gso[i])
        y = l.round() * basis[i]
        res += y
        w = w - (l - l.round()) * gso[i] - y
    return res

mat = [
[_sage_const_1 , _sage_const_80 ],
[_sage_const_0 , _sage_const_128 ]
]
mat = Matrix(QQ, mat)
mat = mat.LLL()
target_vector = [_sage_const_0 , _sage_const_50 ]
print(babai_cvp(mat, target_vector))

